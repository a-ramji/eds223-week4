---
title: "Week 4 Notes"
author: "Anna Ramji"
format: html
editor: visual
---

# Week 4

## Tuesday, October 24, 2023

## Spatial data models

-   vector data

    -   points, lines, polygons

        -   limitations

    -   discrete

-   raster data

    -   grid

        -   putting everything into little boxes

    -   continuous

![](images/vector-allison-drawing.png)

![](images/raster-data-models.png)

## raster data models

geometry

-   cell size

-   number of rows/columns

-   cell origin

-   CRS

attribute

-   one value per cell

    -   categorical, numerical, logical

        -   examples: categorical( land cover (forest, grassland)), logical (true/false -- is it water?), numerical (avg temp)

        -   size of cell -- resolution

in vector data, for every row, we could have many columns

in raster, we only get one attribute per cell (one column)

-   ex, only PM 2.5

what do we do?

-   make a bunch of them

-   layers

-   grid cells are the same, values correspond to something different

-   "stack"

![](images/raster-stack.png){width="514"}

-   each raster is a layer

-   all in the same place = stack (we can stack them on top of each other)

-   placement matters

![](images/raster-resolution.png)

## spatial resolution

-   cell size --\> resolution

-   more cells = finer/higher res

-   fewer cells = coarser/lower res

## extent

![](images/raster-extent.png)

## position

-   where cell origin is

![](images/raster-position.png){width="656"}

Note: can only stack if they have the same resolution, extent, and position

temporal radiometric, symmetric resolutions w diff remote sensing strats

## new tools for a new data type

![](images/new-data-tool.png)

-   matrix

-   single layer in a raster is like a single column in our data frame

# subsetting

-   dplyr fitler() etc.

-   can't do that anymore!!

have to switch gears and learn a whole new language

sp, been decommissioned in the last month, now sf

raster

sf (now the most popular)

-   can't handle raster objects

terra

-   raster :)

-   user-friendly package for dealing w raster data (terra, along w stars)

-   also has some ability to handle vector data

-   resolution is extent divided by number of boxes

-   note: there's a package called tidyterra that lets you do some tidyverse stuff in terra

## clipping

-   if we have a bigger raster (bigger extent)

-   have a smaller extent

-   want them to match the same extent

-   clip the bigger one to match the smaller one

-   trimming a bigger piece of paper to match a smaller piece of paper

-   can be different resolutions

## masking

-   might want to subset to cells that are distributed around the raster

-   create a mask that you can then apply to our raster

-   make a mask of the cells you want to end up with

-   logical values in a raster

    -   create a raster that is T/F, empty = false, desired ones are true

    -   apply the mask to the raster to get the cells you want (zones you want, for example)

-   like intersection

-   resolution, extent, and position have to match

in vectors, we ask if they intersect, in raster you have to make them intersect in a way

## map algebra

-   operations that modify or summarize raster cell values

-   power of the Matrix :)

    -   matrices are much more efficient than dataframes

    -   computationally fast math

-   raster data is a matrix of rows and columns

-   raster is faster, vector is corrector

    -   not as correct bc summarizing into grids

scale or number of cells from lowest to highest

-   local

    -   cell-by-cell operations in one or several layers

    -   addition, exponential, log, logical/conditional

    -   not using the value of one cell to do anything to another

    -   can do this across layers, considering each cell by itself

    -   ex: normalized difference vegetation index (NDVI) = NIR - Red / NIR + Red

-   focal

-   zonal

-   global

## local operations

-   local

    -   cell-by-cell operations in one or several layers

    -   addition, exponential, log, logical/conditional

    -   not using the value of one cell to do anything to another

    -   can do this across layers, considering each cell by itself

    -   ex: normalized difference vegetation index (NDVI) = NIR - Red / NIR + Red

-   maintains spatial data

## focal operations

-   applies an aggregation function to all cells within a specified neighborhood, uses the corresponding output as the new value for the central cell, and moves on to the next central cell

-   examples:

    -   smoothing: Gaussian kernel

    -   kernel, filter, moving window

-   maintains spatial data

-   example -- slope of terrain

-   to find slope, you need the points around it

## zonal operations

-   applies an agg function to multiple cells based on a grouping variable

-   doesn't maintain spatial data

-   kind of like group by, summarize

-   

## global

-   
